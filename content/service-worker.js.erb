// highly based on https://developers.google.com/web/fundamentals/primers/service-workers

<%
paths_to_cache = @items.find_all('/static/*')
        .map { |item| item.path }
        .uniq
        .to_json
%>

const CACHE_NAME = 'cache-v2'
const urlsToCache = <%= paths_to_cache %>

self.addEventListener('install', event => {
  // Perform install steps
  event.waitUntil(caches.open(CACHE_NAME).then(cache => {
    return cache.addAll(urlsToCache)
  }))
})

function isCacheable(request) {
  const url = new URL(request.url)
  return /^\/cover\/(.+)\.(png|jpg|jpeg|webp)$/gi.test(url.pathname)
}

self.addEventListener('fetch', event => {
  event.respondWith(caches.match(event.request).then(response => {
    // Cache hit - return response
    if (response) {
      return response
    }

    return fetch(event.request).then(response => {
      // Check if we received a valid response
      if (!response || response.status !== 200 || response.type !== 'basic') {
        return response
      }

      if (isCacheable(event.request)) {
        // IMPORTANT: Clone the response. A response is a stream
        // and because we want the browser to consume the response
        // as well as the cache consuming the response, we need
        // to clone it so we have two streams.
        const responseToCache = response.clone()

        caches.open(CACHE_NAME).then(cache => {
          cache.put(event.request, responseToCache)
        })
      }

      return response
    })
  }))
})
