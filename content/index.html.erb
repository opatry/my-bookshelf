---
title: Mes lectures
uuid: d45018b8-4b50-4d56-a403-aee411ab5931
---

<%
ongoing_book, ongoing_book_cover = ongoing_book_info

books = recent_books
# the ongoing book, if any, takes the room of 2 books
books = books.take(books.size - 2) unless ongoing_book.nil?
%>

<% unless books.empty? %>
  <h1>Lectures récentes <span class="title-more"><a href="<%= @items['/last-readings.*'].path %>">→ voir plus…</a></span></h1>
  <div id="recent-books" class="book-grid">
  <% unless ongoing_book.nil? %>
    <div class="book-card ongoing book-showcase">
    <% unless ongoing_book_cover.nil? %>
    <div class="book-cover-showcase" title="En cours de lecture…">
    <a href="<%= ongoing_book.path %>"><img src="<%= ongoing_book_cover.path(rep: :showcase) %>" alt="Couverture du livre <%= ongoing_book[:title] %> de <%= ongoing_book[:author] %>"></a>
    </div>
    <% end %>
    <div class="book-info">
    <h2><a href="<%= ongoing_book.path %>"><%= ongoing_book[:title] %></a></h2>
    <h4><%= ongoing_book[:author] %></h4>
    </div>
    </div>
  <% end %>
  <% books.each do |book| %>
    <%= book.reps[:card].compiled_content(snapshot: :card) %>
  <% end %>
  </div>
<% end %>

<%
w_books = wished_books(6)
unless w_books.empty?
%>
  <h1>Envies <span class="title-more"><a href="<%= @items['/wished-books.*'].path %>">→ voir plus…</a></span></h1>
  <div id="wished-books" class="book-grid">
  <% w_books.each do |book| %>
    <%= book.reps[:card].compiled_content(snapshot: :card) %>
  <% end %>
  </div>
<% end %>

<% unless books.empty? && w_books.empty? %>
  <h1>Bibliothèque</h1>
<% end %>

  <div id="book-filter-box" class="book-query-box">
    <%= lucide_icon_svg('list-filter', params: { class: 'input-icon' }) %>
    <input id="book-filter-q" type="search" placeholder="Filtrer…" size="40">
  </div>

  <noscript>
    <p>JavaScript est désactivé. Vous pouvez consulter la <a href="<%= @items['/index-noscript.*'].path %>">bibliothèque complète (sans filtre, ni tri ni pagination)</a>.</p>
  </noscript>

  <div id="books-table" class="books-table"></div>
  <script type="text/javascript" defer>
    // TODO load JSON file
  const booksData = <%= JSON[rated_books.map { |book| to_json(book) }] %>;

  var table;

  function updateFilter(query) {
    const queryTrimed = query.trim();
    if (queryTrimed.length > 0) {
      table?.setFilter("title", "like", queryTrimed);
    } else {
      table?.clearFilter();
    }
  }

  const filterField = document.getElementById("book-filter-q");
  filterField.addEventListener("input", (e) => {
    updateFilter(e.target.value.trim());
  });

  window.addEventListener("DOMContentLoaded", () => {
    table = new Tabulator("#books-table", {
      data: booksData,
      layout: "fitColumns",
      responsiveLayout: "hide",
      pagination: "local",
      paginationSize: 18,
      paginationCounter: "rows",
      initialSort: [
          {
            column: "title",
            dir: "asc"
          },
      ],
      headerSortElement: function(column, dir) {
        const isNumeric = column.getField() === "rating" || column.getField() === "favorite";
        const ascIcon = isNumeric 
          ? '<%= lucide_icon_svg('arrow-down-0-1', params: { class: 'icon' }) %>'
          : '<%= lucide_icon_svg('arrow-down-a-z', params: { class: 'icon' }) %>';
        const descIcon = isNumeric
          ? '<%= lucide_icon_svg('arrow-down-1-0', params: { class: 'icon' }) %>'
          : '<%= lucide_icon_svg('arrow-down-z-a', params: { class: 'icon' }) %>';
        switch(dir) {
          case "asc":
            return ascIcon;
          break;
          case "desc":
            return descIcon;
          break;
          default:
            return '<%= lucide_icon_svg('arrow-down-up', params: { class: 'icon' }) %>';
        }
      },
      persistence: {
        sort: true,
      },
      persistenceID: "books",
      columns: [
          {
            headerSort: false,
            field: "cover_mini",
            responsive: 1,
            formatter: "image",
            width: 65,
            minWidth: 65,
            formatterParams: {
              height: "50px",
              width: "auto"
            }
          },
          {
            headerSort: true,
            field: "title",
            title: "Titre",
            minWidth: 150,
            responsive: 0, // never hidden
            // sort taking into account locale (1, 2, 10 vs 1, 10, 2; accented characters etc.)
            sorter: function(a, b, aRow, bRow, column, dir, sorterParams) {
              return a.localeCompare(b, '<%= @config[:site][:lang] %>', { numeric: true, sensitivity: "base", ignorePunctuation: true });
            }
          },
          {
            headerSort: true,
            field: "author",
            title: "Auteur",
            responsive: 1,
            width: 250,
            minWidth: 100,
            minWidth: 150,
          },
          {
            headerSort: true,
            sorter: "number",
            headerSortStartingDir: "desc",
            field: "rating",
            title: "Note",
            responsive: 2,
            formatter: function(cell, formatterParams, onRendered) {
              const maxStars = parseInt(formatterParams?.stars) || 10;
              let value = parseInt(cell.getValue()) || 0;
              value = Math.max(0, Math.min(value, maxStars));
              const element = cell.getElement();
              element.style.whiteSpace = 'nowrap';
              element.style.overflow = 'hidden';
              element.style.textOverflow = 'ellipsis';
              element.setAttribute('aria-label', value);

              const starActive = '<%= star_svg(filled: true, size: 16) %>';
              const starInactive = '<%= star_svg(filled: false, size: 16) %>';

              const stars = document.createElement('div');
              stars.setAttribute('aria-label', value);
              stars.setAttribute('class', 'rating-bar');
              stars.dataset.rating = value;

              for (let i = 0; i < maxStars; ++i) {
                stars.insertAdjacentHTML('beforeend', i < value ? starActive : starInactive);
              }

              return stars;
            },
            formatterParams: {
              stars: 10
            },
            hozAlign: "center",
            width: 200,
            minWidth: 150,
            tooltip: true,
          },
          {
            headerSort: true,
            sorter: "boolean",
            headerSortStartingDir: "desc",
            field: "favorite",
            responsive: 2,
            formatter: function(cell, formatterParams, onRendered) {
              return cell.getValue() ? '<span aria-label="Coup de cœur"><%= heart_svg %></span>' : '';
            },
            hozAlign: "center",
            width: 65,
            minWidth: 50,
            tooltip: function(e, cell, onRendered) {
              if (cell.getValue()) {
                var tooltipElement = document.createElement("div");
                tooltipElement.innerText = "Coup de cœur"
                return tooltipElement;
              } else {
                return null;
              }
            }
          },
      ],
      langs: {
          "fr": {
              "columns": {
                  "name": "Nom",
              },
              "data": {
                  "loading": "Chargement",
                  "error": "Erreur",
              },
              "groups": {
                  "item": "élément",
                  "items":"éléments",
              },
              "pagination": {
                  "page_size": "Taille de page",
                  "page_title": "Afficher la page",
                  "first": "«",
                  "first_title": "Première page",
                  "last": "»",
                  "last_title": "Dernière page",
                  "prev": "‹",
                  "prev_title": "Page précédente",
                  "next": "›",
                  "next_title": "Page suivante",
                  "all": "Tout",
                  "counter": {
                      "showing": "",
                      "of": " / ",
                      "rows": "lignes",
                      "pages": "pages",
                  }
              },
              "headerFilters":{
                  "default": "Filtrer la colonne…",
                  "columns": {
                      "name": "Filtrer par nom…",
                      "author": "Filtrer par auteur…",
                      "rating": "Filtrer par note…",
                      "favorite": "Filtrer par favoris…",
                  }
              }
          }
      },
    });

    table.on("rowClick", function(e, row) {
      const book = row._row.data;
      window.location = book.link;
    });
  });

  window.addEventListener("load", (event) => {
    table?.setLocale("fr");
  });
  </script>