---
title: Mes lectures
uuid: d45018b8-4b50-4d56-a403-aee411ab5931
---

  <div id="book-filter-box">
    <span class="material-symbols-outlined input-icon">filter_list</span>
    <input id="book-filter-q" type="search" placeholder="Filtrer…" size="40">
  </div>

  <noscript>
  <table id="books-table-noscript" class="books-table">
  <thead>
    <tr>
      <th style="width: 65px;"><!-- cover --></th>
      <th>Titre</th>
      <th>Auteur</th>
      <th style="width: 220px;"><!-- rating --></th>
      <th style="width: 65px;"><!-- favorite --></th>
    </tr>
  </thead>
  <tbody>
<% natural_sort(@items.select { |item| book?(item) }).each do |book| %>
    <tr id="isbn_<%= book[:isbn] %>" data-isbn="<%= book[:isbn] %>" data-uuid="<%= book[:uuid] %>">
      <td>
<%
cover = @items["/cover/#{book[:isbn]}.*"]
unless cover.nil?
%>
        <img src="<%= cover.path(rep: :mini) %>" width="<%= cover["width_mini"] %>" height="<%= cover["height_mini"] %>" class="book-cover-mini">
<% end %>
      </td>
      <td><a href="<%= book.path %>"><%= book[:title] %></a></td>
      <td><%= book[:author] %></td>
      <td>
        <p aria-label="<%= book[:rating] %>" title="<%= book[:rating] %>" style="vertical-align: middle; text-align: center;">
          <% 10.times do |i| %>
          <%= star_svg(filled: i < book[:rating]) %>
          <% end %>
        </p>
      </td>
      <td>
<% if book[:favorite] || false %>
        <span class="favorite-icon" aria-label="Coup de cœur" title="Coup de cœur"><%= heart_svg %></span>
<% end %>
      </td>
    </tr>
<% end %>
  </tbody>
  </table>
  </noscript>

  <div id="books-table" class="books-table"></div>
  <script type="text/javascript">
    // TODO load JSON file
  var booksData = <%= JSON[@items.select { |item| book?(item) }.map { |book| to_json(book) }] %>;
  var table = new Tabulator("#books-table", {
    data: booksData,
    layout: "fitColumns",
    responsiveLayout: "hide",
    pagination: "local",
    paginationSize: 18,
    paginationCounter: "rows",
    initialSort: [
        {
          column: "title",
          dir: "asc"
        },
    ],
    headerSortElement: function(column, dir){
        switch(dir){
            case "asc":
                return '<span class="icon material-symbols-outlined">keyboard_arrow_up</span>';
            break;
            case "desc":
                return '<span class="icon material-symbols-outlined">keyboard_arrow_down</span>';
            break;
            default:
                return '<span class="icon material-symbols-outlined">sort_by_alpha</span>';
        }
    },
    persistence: {
      sort: true,
    },
    persistenceID: "books",
    columns: [
        {
          headerSort: false,
          field: "cover_mini",
          responsive: 1,
          formatter: "image",
          width: 65,
          minWidth: 65,
          formatterParams: {
            height: "50px",
            width: "auto"
          }
        },
        {
          headerSort: true,
          field: "title",
          title: "Titre",
          minWidth: 150,
          responsive: 0, // never hidden
          // sort taking into account locale (1, 2, 10 vs 1, 10, 2; accented characters etc.)
          sorter: function(a, b, aRow, bRow, column, dir, sorterParams) {
            return a.localeCompare(b, '<%= @config[:site][:lang] %>', { numeric: true, sensitivity: "base", ignorePunctuation: true });
          }
        },
        {
          headerSort: true,
          field: "author",
          title: "Auteur",
          responsive: 1,
          width: 250,
          minWidth: 100,
          minWidth: 150,
        },
        {
          headerSort: true,
          headerSortStartingDir: "desc",
          field: "rating",
          title: "Note",
          responsive: 2,
          formatter: function(cell, formatterParams, onRendered) {
            var maxStars = 10;
            var value = cell.getValue();
            value = value && !isNaN(value) ? parseInt(value) : 0;
            value = Math.max(0, Math.min(value, maxStars));
            var element = cell.getElement();

            var starActive = '<%= star_svg(filled: true, params: { size: 16 }) %>';
            var starInactive = '<%= star_svg(filled: false, params: { size: 16 }) %>';

            var stars = document.createElement('div');
            stars.setAttribute('aria-label', value);
            stars.setAttribute('class', 'rating-bar');
            stars.dataset.rating = value;

            for (var i = 1; i < 10; ++i) {
              var star = document.createElement('span');
              star.innerHTML = i < value ? starActive : starInactive;
              stars.appendChild(star);
            }

            element.style.whiteSpace = 'nowrap';
            element.style.overflow = 'hidden';
            element.style.textOverflow = 'ellipsis';

            element.setAttribute('aria-label', value);

            return stars;
          },
          hozAlign: "center",
          width: 200,
          minWidth: 150,
          tooltip: true,
        },
        {
          headerSort: true,
          sorter: "boolean",
          headerSortStartingDir: "desc",
          field: "favorite",
          responsive: 2,
          formatter: function(cell, formatterParams, onRendered) {
            return cell.getValue() ? '<span aria-label="Coup de cœur"><%= heart_svg %></span>' : '';
          },
          hozAlign: "center",
          width: 65,
          minWidth: 50,
          tooltip: function(e, cell, onRendered) {
            if (cell.getValue()) {
              var tooltipElement = document.createElement("div");
              tooltipElement.innerText = "Coup de cœur"
              return tooltipElement;
            } else {
              return null;
            }
          }
        },
    ],
    langs: {
        "fr": {
            "columns": {
                "name": "Nom",
            },
            "data": {
                "loading": "Chargement",
                "error": "Erreur",
            },
            "groups": {
                "item": "élément",
                "items":"éléments",
            },
            "pagination": {
                "page_size": "Taille de page",
                "page_title": "Afficher la page",
                "first": "«",
                "first_title": "Première page",
                "last": "»",
                "last_title": "Dernière page",
                "prev": "‹",
                "prev_title": "Page précédente",
                "next": "›",
                "next_title": "Page suivante",
                "all": "Tout",
                "counter": {
                    "showing": "",
                    "of": " / ",
                    "rows": "lignes",
                    "pages": "pages",
                }
            },
            "headerFilters":{
                "default": "Filtrer la colonne…",
                "columns": {
                    "name": "Filtrer par nom…",
                    "author": "Filtrer par auteur…",
                    "rating": "Filtrer par note…",
                    "favorite": "Filtrer par favoris…",
                }
            }
        }
    },
  });

  function updateFilter(query) {
    var queryTrimed = query.trim();
    if (queryTrimed.length > 0) {
      table.setFilter("title", "like", queryTrimed);
    } else {
      table.clearFilter();
    }
  }

  var filterField = document.getElementById("book-filter-q");
  filterField.addEventListener("input", (e) => {
    updateFilter(e.target.value.trim());
  });

  table.on("rowClick", function(e, row){
    var book = row._row.data;
    window.location = book.link;
  });

  window.addEventListener("load", (event) => {
    table.setLocale("fr");
  });
  </script>