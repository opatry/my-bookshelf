#!/usr/bin/env ruby
# frozen_string_literal: true

require 'mimemagic'
require 'image_size'
require 'i18n'

# mainly used for Android "Add to Homescreen" feature
favicon_reprs = %i[default favicon152 favicon36 favicon48 favicon72 favicon96 favicon144 favicon192 favicon512]

preprocess do
  # by default, no locale available, I18n::InvalidLocale: "fr" is not a valid locale
  I18n.load_path << Dir["#{File.expand_path('strings')}/*.yml"]
  I18n.available_locales = [ @config[:site][:lang] ]
  I18n.default_locale = @config[:site][:lang]

  @config[:favicon_reprs] = favicon_reprs

  @config[:feed_book_isbn] = feed_books.map { |book| book[:isbn] }
  @config[:recent_book_isbn] = recent_books.map { |book| book[:isbn] }

  missing_covers = 0

  @items.select { |item| item.identifier =~ '/index.*' || book?(item) }.each do |item|
    raise "item #{item.identifier} doesn't have a uuid (suggested: #{SecureRandom.uuid})" unless item[:uuid]

    if book?(item)
      item_name = item.identifier.without_exts.delete_prefix('/book/')
      raise "mismatch between identifier name '#{item_name}' & isbn '#{item[:isbn]}'" if item[:isbn] != item_name

      if @items["/cover/#{item[:isbn]}.*"].nil?
        missing_covers += 1
        query = CGI.escape("#{item[:title]} #{item[:author]}")
        google_q = "https://www.google.fr/search?q=#{query}&udm=2"
        amazon_q = "https://www.amazon.fr/s?k=#{query}&i=stripbooks"
        puts "- missing cover for #{format_isbn(item[:isbn])} #{item[:title]} #{item[:author]} | #{google_q} | #{amazon_q}"
      end
    end
  end

  @items.select { |item| item.identifier =~ '/cover/*' }.each do |cover|
    isbn = cover.identifier.without_exts.delete_prefix('/cover/')
    raise "cover for unavailable book #{isbn}" if @items.select { |item| book?(item) }.none? { |item| item[:isbn] == isbn }
  end

  @items.select { |i| i.identifier =~ '/static/pwa-screenshot-*' }.each do |picture|
    desktop_screenshot = picture.identifier =~ '/static/pwa-screenshot-desktop-*'
    phone_screenshot = picture.identifier =~ '/static/pwa-screenshot-phone-*'
    picture_path = picture.raw_filename
    picture[:mime_type] = MimeMagic.by_path(picture_path).type
    picture_size = ImageSize.new(IO.read(picture_path))
    # TODO size depends on target (phone or desktop)
    #  isolate each set in its own directory to ease choice
    picture_width = @config[:pwa_screenshot_width][phone_screenshot ? :phone : :desktop]
    picture_height = picture_size.height * picture_width / picture_size.width
    picture[:width] = picture_width
    picture[:height] = picture_height
    picture[:pwa_platform] = phone_screenshot ? 'android' : 'macos'
    picture[:pwa_form_factor] = desktop_screenshot ? 'wide' : 'narrow'
  end

  @items.select { |i| i.identifier =~ '/cover/*' }.each do |cover|
    cover_path = cover.raw_filename
    cover[:mime_type] = MimeMagic.by_path(cover_path).type
    cover_size = ImageSize.new(IO.read(cover_path))
    %i[mini medium default].each do |repr|
      cover_repr_width = @config[:cover][:width][repr]
      cover_repr_height = cover_size.height * cover_repr_width / cover_size.width
      cover["width_#{repr}"] = cover_repr_width
      cover["height_#{repr}"] = cover_repr_height
    end
  end

  puts "#{@items.count { |item| book?(item) }} books"
  puts " - #{missing_covers} missing covers" if missing_covers > 0
end

favicon_reprs.each do |repr|
  compile '/static/favicon.*', rep: repr do
    route = if repr == :default
              filter :favicon
              # browser friendly favicon location + avoids 404 errors on server when such browsers are looking for it
              '/favicon.ico'
            else
              # extract size from favicon repr name
              size = repr.to_s.delete_prefix('favicon').to_i
              filter :thumbnailize, width: size
              "/#{repr}.#{item[:extension]}"
            end
    write route
  end
end

compile '/static/pwa-screenshot-*' do
  filter :thumbnailize, width: item[:width] unless @config[:dev]

  write item.identifier.to_s.gsub(%r/\d+\-/, '')
end

compile '/static/{babelio,senscritique}.*' do
  filter :thumbnailize, width: @config[:social][:badge_size] unless @config[:dev]
end

%i[compact default].each do |repr|
  compile '/static/avatar.*', rep: repr do
    filter :thumbnailize, width: @config[:avatar_size][repr] #unless @config[:dev]
    
    suffix = "-#{repr}" unless repr == :default
    write "#{item.identifier.without_exts}#{suffix}.#{item[:extension]}"
  end
end

compile '/static/**/*' do
  # don't filter or layout
end

%i[mini medium default].each do |repr|
  compile '/cover/**/*', rep: repr do
    isbn = item.identifier.without_exts.split('/')[-1]
    next if repr == :medium && !@config[:recent_book_isbn].include?(isbn)

    width = @config[:cover][:width][repr]
    filter :thumbnailize, width: width unless @config[:dev]

    suffix = "-#{repr}" unless repr == :default
    write "#{item.identifier.without_exts}#{suffix}.#{item[:extension]}"
  end
end

compile '/book/**/*', rep: :feed do
  next unless @config[:feed_book_isbn].include?(item[:isbn])
  filter :erb
  filter :kramdown if item[:extension] == 'md'
  filter :html_compressor, type: item[:extension] unless @config[:dev]

  layout '/feed_entry.*'
  snapshot :feed

  # do not write/route such representation
  write nil
end

compile '/book/**/*' do
  filter :erb
  filter :kramdown
  filter :html_compressor, type: item[:extension] unless @config[:dev]

  layout '/book.*'
  layout '/default.*'

  write item.identifier.without_ext + '/index.html'
end

compile '/api/v1/*' do
  filter :erb
  layout item[:layout] unless item[:layout] == 'none'
end

compile '/**/*.md' do
  filter :erb
  filter :kramdown

  layout '/default.*'
end

compile '/service-worker.*' do
  filter :erb
end

compile '/manifest.*' do
  filter :erb
end

compile '/**/*' do
  unless item.binary?
    filter :erb
    layout '/default.*' unless item[:layout] == 'none'
  end
end

route '/feed.*' do
  '/feed.xml'
end

route '/robots.txt' do
  '/robots.txt'
end

route '/manifest.*' do
  '/manifest.json'
end

route '/service-worker.*' do
  '/service-worker.js'
end

route '/error/404.*' do
  # Firebase hosting expected 404.html at the root (see https://firebase.google.com/docs/hosting/full-config#404)
  '/404.html'
end

route '/api/**/*' do
  item.identifier.to_s.chomp('.erb')
end

route '/index.*' do
  "/index.html"
end

route '/**/*.erb' do
  "#{item.identifier.without_ext}/index.html"
end

passthrough '/static/favicon{192,512}-maskable.*'

passthrough '/**/*'

layout '/**/*', :erb, trim_mode: '-'
